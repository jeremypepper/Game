<!-- Lets talk about geddy -->
<div class="hero-unit geddy-welcome-box">
  <h1>&#175;\\_(ãƒ„)_/&#175;</h1>
  <p>Yup, there should be a game here... someday</p>
</div>

<div class="hero-unit" id="userarea">
  <form action="/users" method="POST">
  	<h2>Name</h2>
    <input type="text" class="span6" name="name">
    <input type="submit" class="btn btn-primary">
  </form>
</div>
<div class="hero-unit">
	<h3>Games<h3>
	<ul id="games"></ul>
	<h3>Friends<h3>
	<ul id="friends"></ul>
</div>
<div id="drawarea" class="hero-unit none">
    <h2 id="wordtitle"></h2>
    <canvas width="320" height="240" id="thecanvas"></canvas>
    <div id="drawtools" class="none">
        <a id="red" href="#"></a><a id="blue" href="#"></a><a id="complete" href="#">complete</a>
    </div>
</div>
</div>
<script type="text/javascript">
var name;
var otherName;
var buffer =[];
var $canvas = $("#thecanvas");
var ctx = $canvas[0].getContext('2d');
var isCanvasEnabled;

function getUsers(){
	// actually get games and users
	$.getJSON("/gamesAndFriends",function(data){
		$("#friends").empty();
		for (var i = 0; i < data.friends.length; i++) {
			var user = data.friends[i];
			$("#friends").append($("<li><a href='#'>"+user.name +"</a></li>"));
		};
		
		$("#games").empty();
		for (var i = 0; i < data.games.length; i++) {
			var game = data.games[i];
			var $li = $("<li>");
			var $a = $("<a href='#'>"+game.drawFriend +" -> "+ game.answerFriend +"</a>").data("game", game);
			$li.append($a);
			$("#games").append($li);
				
		};
	});
}
function getGames(){
	$.get("/games?user="+name);
}
$("#userarea form").submit(function(e){
	e.preventDefault();
	name = $(this).find("input[type='text']").val();
	var formdata = {"name":name};
	$.getJSON("/users/" + name + ".json",function(data){
		if(data && data.user && data.user.id)
		{
			getUsers();
		}
		else
		{
			$.post("/users", formdata,function(data){
				getUsers();
			});
		}
	});
});


function startGame(game){
	$("#wordtitle").text(game.drawFriend + "->" + game.answerFriend);
	$("#drawarea").show().data("game",game);
	if(game.drawData)
	{
		isCanvasEnabled = false;
		drawIt(JSON.parse(game.drawData));
	}
	else
	{
		$("#drawtools").show();
		isCanvasEnabled = true;
	}
}

$("#friends a, #games a").live("click",function(e){
	e.preventDefault();
	var $this = $(this);
	var game = $this.data("game");
	if(game){
		startGame(game);
	}
	else{
		otherName = $this.text();
		postMessage ={
		  		drawFriend: name
		  		, answerFriend: otherName
			};
		$.get("/games/intern.json",
			postMessage,
			function(data){
				if(data && data.game)
					startGame(data.game);
				else
					alert("error");
			}
		)
	}
});

window.onmousedown = function () {
	if(isCanvasEnabled)
	{
    	isDown = 1;
    }
};
window.onmouseup = function () {
    isDown = 0;
    lastPoint = [];
};
$canvas.mousemove(function (e) {
    var offsetX = $canvas.position().left * -1;
    var offsetY = $canvas.position().top * -1;
    var point = [e.pageX + offsetX, e.pageY + offsetY]
    if (isDown) {
        if (!lastPoint)
            lastPoint = point;
        buffer.push({ c: "l", p1: lastPoint, p2: point });
        drawSection(lastPoint,point);
        lastPoint = point;
    }
});

$("#complete").click(function(e){
	e.preventDefault();
	var game = $("#drawarea").data("game");
	$.ajax("/games/update?id="+game.id, 
		{ data: {drawData: JSON.stringify(buffer)},
		  type: "PUT"
		});
});

function drawSection(point,lastPoint){
	ctx.beginPath();
    ctx.moveTo(lastPoint[0], lastPoint[1]);
	ctx.lineTo(point[0], point[1]);
    ctx.stroke();
}
function drawIt(drawData) {
	var ctx = $canvas[0].getContext('2d'),
		timeOffset = 0,
		timeStep = 20;
	ctx.fillStyle = "white";
	ctx.fillRect(0, 0, 10000, 10000);

	for (var i = 0; i < drawData.length; i++) {
	    var chunk = drawData[i];
	    if (chunk.c === "l") {
	        (function (chunk) {
	            window.setTimeout(function () {
	                drawSection(chunk.p1,chunk.p2);
	            }, timeOffset);
	        })(chunk);

	    }
	    else if (chunk.c === "c") {
	        (function (chunk) {
	            window.setTimeout(function () {
	                ctx.strokeStyle = chunk.cd;
	            }, timeOffset);
	        })(chunk);
	    }
	    timeOffset += timeStep;
	};
}
</script>
